name: 'Reusable Terraform Plan/Apply'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      autoApply:
        required: false
        type: boolean
        default: false
      workingDir:
        required: true
        type: string

#These environment variables are used by the terraform azure provider to setup OIDD authenticate.
env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
  AWS_ROLE_SESSION_NAME: ${{ vars.ROLE_SESSION_NAME }}
  TF_VAR_ROLE_SESSION_NAME: ${{ vars.ROLE_SESSION_NAME }}
  WORKING_DIR: ${{ inputs.workingDir }}

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v5

      # OIDC Connection to AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.TF_ROLE_SESSION_NAME }}

      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          echo "Running terraform init with -backend-config=${{ inputs.environment }}.tfbackend"
          terraform init -backend-config=${{ inputs.environment }}.tfbackend -upgrade

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          echo "Running plan on ${{ inputs.environment }} with -var-file=${{ inputs.environment }}.tfvars"
          terraform plan -detailed-exitcode -no-color -out tfplan -var-file=${{ inputs.environment }}.tfvars || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      # Save plan to artifacts
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: "${{ env.WORKING_DIR }}/tfplan"
          if-no-files-found: error

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: "Show Plan"
        run:
          terraform show tfplan

      # If this is a PR post the changes
      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              
              const body = `${process.env.SUMMARY}`;
              github.rest.issues.createComment({
                  issue_number: context.payload.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
              })
